#include <stdio.h>
#include <limits.h>
#include <string.h>

#define MAX_ITEMS 50

typedef struct Item {
    int id;
    char name[50];
    int quantity;
    float price;
    int soldCount;
} Item;

int Income[MAX_ITEMS]={0};

Item inventory[MAX_ITEMS];
int itemCount = 0;

//function to remove items
void RemoveItem(void)
{
    int num_id;
    printf("Enter the id of the item you want to remove:");
    scanf("%d",&num_id);
    for (int z=0;z<MAX_ITEMS;z++)
    {
        if (inventory[z].id ==num_id)
        {
            strcpy(inventory[z].name," ");
            inventory[z].quantity = 0;
            inventory[z].price = 0;
            inventory[z].soldCount = 0;
        }
    }
    return ;
}

// Function for adding items to inventory
void addItem(int id, char name[], int quantity, float price) {
    if (itemCount < MAX_ITEMS) {
        inventory[itemCount].id = id;
        strcpy(inventory[itemCount].name, name);
        inventory[itemCount].quantity = quantity;
        inventory[itemCount].price = price;
        inventory[itemCount].soldCount = 0;
        itemCount++;
        printf("Item '%s' added successfully!\n", name);
    } else {
        printf("Inventory is full! Cannot add more items.\n");
    }
}

// Function to track and display revenue for each item
int revenue_Check(int arr[]) {
    int max = INT_MIN;
    int rev_id = -1;
    for (int i = 0; i < MAX_ITEMS; i++) {
        if (arr[i] > max) {
            max = arr[i];
            rev_id = i+1;
        }
    }
    if (rev_id != -1) {
        printf("Item ID %d generated the most revenue of $%d\n", rev_id, max);
    }
    return rev_id;
}

// Function for selling an item
void sellItem(int id, int quantitySold) {
   

    for (int i = 0; i < itemCount; i++) {
        if (inventory[i].id == id) {
            if (inventory[i].quantity >= quantitySold)
            {
                inventory[i].quantity -= quantitySold;
                inventory[i].soldCount += quantitySold;
                Income[i]+=(inventory[i].price * quantitySold);
               
                printf("Sale successful! %d units of '%s' sold.\n", quantitySold, inventory[i].name);
                printf("Updated Quantity: %d, Total Sold: %d\n", inventory[i].quantity, inventory[i].soldCount);
               
            }
            else {
                printf("Insufficient stock for item '%s'. Available quantity: %d.\n", inventory[i].name, inventory[i].quantity);
            }
            return;
        }
       
        printf("Item with ID %d not found in inventory.\n", id);
       
    }
   
   
}


// Function for restocking the items when needed
void restock(void) {
    int restock_id, rquantity;

    printf("Enter the ID of the item you want to restock: ");
    scanf("%d", &restock_id);
    printf("Enter the quantity you want to add: ");
    scanf("%d", &rquantity);

    for (int k = 0; k < itemCount; k++) {
        if (inventory[k].id == restock_id) {
            inventory[k].quantity += rquantity;
            printf("Item '%s' restocked. New quantity: %d\n", inventory[k].name, inventory[k].quantity);
            return;
        }
    }
    printf("Item with ID %d not found in inventory.\n", restock_id);
}

// Function to display the inventory
void displayInventory(void) {
    printf("\n--- Inventory List ---\n");
    for (int i = 0; i < itemCount; i++) {
        printf("ID: %d, Name: %s, Quantity: %d, Price: %.2f, Sold: %d\n",
               inventory[i].id, inventory[i].name, inventory[i].quantity,
               inventory[i].price, inventory[i].soldCount);
    }
}

// Function to handle the menu
void displayMenu(void) {
    printf("\n--- Admin Inventory Management Menu ---\n");
    printf("1. Add Item\n");
    printf("2. Sell Item\n");
    printf("3. Display Inventory\n");
    printf("4. Restock Item\n");
    printf("5. Check Revenue\n");
    printf("6. Delete Item\n");
    printf("7. Exit\n");
    printf("Enter your choice: ");
}

int main() {
    int choice, id, quantity;
    float price;
    char name[50];

    // Pre-populating the inventory with some items
    Item itemsToAdd[] = {
        {1, "Pen", 100, 2.50}, {2, "Notebook", 60, 15.00},
        {3, "Eraser", 150, 1.00}, {4, "Pencil", 120, 1.50},
        {5, "Marker", 80, 5.00}, {6, "Ruler", 70, 3.00},
        {7, "Glue Stick", 90, 4.00}, {8, "Scissors", 50, 12.00},
        {9, "Stapler", 75, 10.00}, {10, "Paper Clips", 200, 0.20},
        {11, "Whiteboard", 55, 40.00}, {12, "Calculator", 65, 25.00},
        {13, "Highlighter", 100, 3.00}, {14, "Folder", 80, 7.00},
        {15, "Sticky Notes", 150, 2.50}, {16, "Printer Ink", 60, 35.00},
        {17, "Flash Drive", 70, 20.00}, {18, "Laptop Bag", 50, 150.00},
        {19, "Coffee Mug", 100, 8.00}, {20, "Desk Lamp", 55, 30.00},
        {21, "USB Cable", 120, 5.00}, {22, "Phone Charger", 70, 25.00},
        {23, "Power Bank", 65, 45.00}, {24, "Headphones", 50, 75.00},
        {25, "Mouse Pad", 90, 6.00}, {26, "Keyboard", 70, 40.00},
        {27, "Monitor", 55, 200.00}, {28, "Water Bottle", 80, 10.00},
        {29, "Backpack", 60, 60.00}, {30, "Umbrella", 75, 20.00},
        {31, "T-shirt", 100, 12.50}, {32, "Jeans", 60, 50.00},
        {33, "Sneakers", 70, 80.00}, {34, "Jacket", 50, 120.00},
        {35, "Socks", 150, 3.00}, {36, "Hat", 80, 15.00},
        {37, "Sunglasses", 90, 35.00}, {38, "Wallet", 65, 25.00},
        {39, "Watch", 50, 200.00}, {40, "Perfume", 75, 55.00},
        {41, "Shampoo", 100, 8.50}, {42, "Toothpaste", 120, 4.00},
        {43, "Soap", 200, 2.00}, {44, "Hair Dryer", 60, 50.00},
        {45, "Towel", 70, 12.00}, {46, "Bedsheet", 50, 25.00},
        {47, "Pillow", 55, 18.00}, {48, "Curtains", 65, 30.00},
        {49, "Vacuum Cleaner", 50, 150.00}, {50, "Iron", 60, 40.00}
    };

    for (int i = 0; i < 50; i++) {
        addItem(itemsToAdd[i].id, itemsToAdd[i].name, itemsToAdd[i].quantity, itemsToAdd[i].price);
    }

    // Menu loop
    while (1) {
        displayMenu();
        scanf("%d", &choice);
        getchar(); // Consume the newline character left in the buffer

        switch (choice) {
            case 1:
                // Add Item
                printf("\nEnter Item ID: ");
                scanf("%d", &id);
                getchar(); // Consume the newline character left by the previous input
                printf("Enter Item Name: ");
                scanf(" %[^\n]", name); // Allow spaces in item name
                printf("Enter Quantity: ");
                scanf("%d", &quantity);
                printf("Enter Price: ");
                scanf("%f", &price);
                addItem(id, name, quantity, price);
                break;

            case 2:
                // Sell Item
                printf("\nEnter Item ID to sell: ");
                scanf("%d", &id);
                printf("Enter Quantity to sell: ");
                scanf("%d", &quantity);
                sellItem(id, quantity);
                break;

            case 3:
                // Display Inventory
                displayInventory();
                break;

            case 4:
                // Restock Item
                restock();
                break;
           
            case 5:
                //revenue Checcking
                revenue_Check(Income);
                break;
               
            case 6:
                RemoveItem();
                break;

            case 7:
                // Exit
                printf("Exiting the program. Goodbye!\n");
                return 0;

            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
}
